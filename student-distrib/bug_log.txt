****************************************** BUG LOG *******************************************
-----------------
TEMPLATE: 
-----------------
FILE/FUNCTION: 
BUG: 
SOLUTION:
DIFFICULTY:
-----------------
**************************************** CHECKPOINT 1 ****************************************
-----------------
FILE/FUNCTION: x86_desc.S
BUG: Kernel kept looping over and over again.
SOLUTION: GDT wasn't loaded correctly (we were using the wrong descriptor pointer with the lgdt command).
DIFFICULTY: 2 hours
-----------------
FILE/FUNCTION: rtc.c - handler
BUG: rtc was not never interrupting and calling the handler.
SOLUTION: We realized that we had done everything right, but had not enabled irq2 on 
the primary PIC, after enabling irq0 on the secondary.
-----------------
FILE/FUNCTION: asm_linkage.S - keyboard.c/h
BUG: Our keyboard was only recieving the very first input interrupt, then not getting anymore.
SOLUTION: We had not created the ASM linkage for the interrupts, causing the interrupt flag to 
prevent more interrupts each time an interrupt was called. We added the linkage code to call
iret, causing the orginal eflags to be set and allow more interrupts.
-----------------
FILE/FUNCTION: paging_asm.S
BUG: Saying there was an implicit declaration for function when we clearly had created the functions.
SOLUTION: It turns out that having the same assembly file name as your header file does not work. So, we changed paging.S to paging_asm.S
-----------------
FILE/FUNCTION: paging.c/h - setup
BUG: Our code was crashing right when we started. the values in our assembly code was incorrect.
SOLUTION: We realized that we where passing the incorrect values of memory to the assembly functions, causing it to map incorrectly.
We had to use &page_dir instead of just page_dir.
-----------------
FILE/FUNCTION: keyboard.c
BUG: After we press a key on the keyboard, letting go would also trigger an interrupt and print a character.
SOLUTION: To fix this error we realized that the let go characters where the pressed char + 128, so we just
did a check to filter out higher idx characters.
-----------------
FILE/FUNCTION: keyboard.c
BUG: Keyboard receiving inputs but only printing out numbers instead of characters.
SOLUTION: Had to map the corresponding values received from the interrupt into the correct keyboard characters. We used a char
array and indexed the numbers printed out to corresponding keyboard characters.
-----------------
FILE/FUNCTION: idt.c
BUG: Double fault error keeps happening when loading idt.
SOLUTION: We forgot to actually initialize the idt itself in the kernel.c file, which caused a double fault (found through GDB).
DIFFICULTY: 2 hours
-----------------
**************************************** CHECKPOINT 2 ****************************************
-----------------
FILE/FUNCTION: terminal/keyboard writing
BUG: moving text up for new line causing weird graphical errors
DIFFICULTY: 30 min
SOLUTION: when I tried to move the screen up the entire screen would change color and fill with random characters. I realized that when I
was rewriting bytes in video memory to move the characters up, I was writing byte by byte instead of every other byte. This caused the colors
to change because the 2nd byte is the color of that character. To fix this I changed every other byte in my iteration.
-----------------
FILE/FUNCTION: rtc_write
BUG: the rtc tests where not going to the frequency I was setting it to
DIFFICULTY: 1 hr
SOLUTION: I was using an unsigned char to store the input frequency which was limiting it to 255 Hz. To fix this bug I replaced it with an int
to hold all inputs from 2-1024 Hz.
-----------------
FILE/FUNCTION: terminal/keyboard roles
BUG: More of a conceptual misunderstanding of what terminal should do
DIFFICULTY: 3 hrs
SOLUTION: I initially used the terminal to handle the printing and did not even have a buffer. Once we realized that terminal was supposed to maintain
the buffer and keyboard is meant to do more of the printing, we had to re-organize our code and add the buffer along with checks for proper handling.
-----------------
**************************************** CHECKPOINT 3 ****************************************
-----------------
FILE/FUNCTION:
BUG:
DIFFICULTY: 
SOLUTION:
-----------------
**************************************** CHECKPOINT 4 ****************************************
-----------------
FILE/FUNCTION:
BUG:
DIFFICULTY: 
SOLUTION:
-----------------
**************************************** CHECKPOINT 5 ****************************************
-----------------
FILE/FUNCTION:
BUG:
DIFFICULTY: 
SOLUTION:
-----------------
